// Generated by Dagger (https://dagger.dev).
package com.company.attendance;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.company.attendance.data.local.ApprovedWiFiDao;
import com.company.attendance.data.local.AttendanceDatabase;
import com.company.attendance.data.local.AttendanceRecordDao;
import com.company.attendance.data.local.QueuedRequestDao;
import com.company.attendance.data.remote.AttendanceApiService;
import com.company.attendance.data.repository.AttendanceRepository;
import com.company.attendance.data.repository.AuthRepository;
import com.company.attendance.di.AppModule;
import com.company.attendance.di.AppModule_ProvideApprovedWiFiDaoFactory;
import com.company.attendance.di.AppModule_ProvideAttendanceApiServiceFactory;
import com.company.attendance.di.AppModule_ProvideAttendanceDatabaseFactory;
import com.company.attendance.di.AppModule_ProvideAttendanceRecordDaoFactory;
import com.company.attendance.di.AppModule_ProvideAttendanceRepositoryFactory;
import com.company.attendance.di.AppModule_ProvideAuthInterceptorFactory;
import com.company.attendance.di.AppModule_ProvideAuthRepositoryFactory;
import com.company.attendance.di.AppModule_ProvideDeviceUtilsFactory;
import com.company.attendance.di.AppModule_ProvideGsonFactory;
import com.company.attendance.di.AppModule_ProvideNetworkUtilsFactory;
import com.company.attendance.di.AppModule_ProvideNotificationUtilsFactory;
import com.company.attendance.di.AppModule_ProvideOkHttpClientFactory;
import com.company.attendance.di.AppModule_ProvidePermissionHandlerFactory;
import com.company.attendance.di.AppModule_ProvidePreferencesManagerFactory;
import com.company.attendance.di.AppModule_ProvideQueuedRequestDaoFactory;
import com.company.attendance.di.AppModule_ProvideRequestQueueManagerFactory;
import com.company.attendance.di.AppModule_ProvideRetrofitFactory;
import com.company.attendance.di.AppModule_ProvideSessionManagerFactory;
import com.company.attendance.di.AppModule_ProvideSupabaseClientFactory;
import com.company.attendance.di.AppModule_ProvideWiFiMonitoringServiceFactory;
import com.company.attendance.di.AppModule_ProvideWiFiValidatorFactory;
import com.company.attendance.di.AppModule_ProvideWorkManagerServiceFactory;
import com.company.attendance.network.AuthInterceptor;
import com.company.attendance.service.RequestQueueManager;
import com.company.attendance.service.WiFiMonitoringService;
import com.company.attendance.service.WorkManagerService;
import com.company.attendance.ui.screens.dashboard.DashboardViewModel;
import com.company.attendance.ui.screens.dashboard.DashboardViewModel_HiltModules_KeyModule_ProvideFactory;
import com.company.attendance.ui.screens.history.HistoryViewModel;
import com.company.attendance.ui.screens.history.HistoryViewModel_HiltModules_KeyModule_ProvideFactory;
import com.company.attendance.ui.screens.login.EnhancedLoginViewModel;
import com.company.attendance.ui.screens.login.EnhancedLoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.company.attendance.ui.screens.login.LoginViewModel;
import com.company.attendance.ui.screens.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.company.attendance.ui.screens.onboarding.OnboardingViewModel;
import com.company.attendance.ui.screens.onboarding.OnboardingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.company.attendance.ui.screens.settings.SettingsViewModel;
import com.company.attendance.ui.screens.settings.SettingsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.company.attendance.utils.DeviceUtils;
import com.company.attendance.utils.NetworkUtils;
import com.company.attendance.utils.NotificationUtils;
import com.company.attendance.utils.PermissionHandler;
import com.company.attendance.utils.PreferencesManager;
import com.company.attendance.utils.SessionManager;
import com.company.attendance.utils.WiFiValidator;
import com.google.gson.Gson;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import io.github.jan.supabase.SupabaseClient;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerAttendanceApplication_HiltComponents_SingletonC {
  private DaggerAttendanceApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public AttendanceApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements AttendanceApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public AttendanceApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements AttendanceApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public AttendanceApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements AttendanceApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public AttendanceApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements AttendanceApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public AttendanceApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements AttendanceApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public AttendanceApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements AttendanceApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public AttendanceApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements AttendanceApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public AttendanceApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends AttendanceApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends AttendanceApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends AttendanceApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends AttendanceApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(6).add(DashboardViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EnhancedLoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HistoryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OnboardingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SettingsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends AttendanceApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<DashboardViewModel> dashboardViewModelProvider;

    private Provider<EnhancedLoginViewModel> enhancedLoginViewModelProvider;

    private Provider<HistoryViewModel> historyViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<OnboardingViewModel> onboardingViewModelProvider;

    private Provider<SettingsViewModel> settingsViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.dashboardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.enhancedLoginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.historyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.onboardingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.settingsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(6).put("com.company.attendance.ui.screens.dashboard.DashboardViewModel", ((Provider) dashboardViewModelProvider)).put("com.company.attendance.ui.screens.login.EnhancedLoginViewModel", ((Provider) enhancedLoginViewModelProvider)).put("com.company.attendance.ui.screens.history.HistoryViewModel", ((Provider) historyViewModelProvider)).put("com.company.attendance.ui.screens.login.LoginViewModel", ((Provider) loginViewModelProvider)).put("com.company.attendance.ui.screens.onboarding.OnboardingViewModel", ((Provider) onboardingViewModelProvider)).put("com.company.attendance.ui.screens.settings.SettingsViewModel", ((Provider) settingsViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.company.attendance.ui.screens.dashboard.DashboardViewModel 
          return (T) new DashboardViewModel(singletonCImpl.provideAttendanceRepositoryProvider.get(), singletonCImpl.provideAuthRepositoryProvider.get(), singletonCImpl.provideWiFiMonitoringServiceProvider.get(), singletonCImpl.providePermissionHandlerProvider.get(), singletonCImpl.provideNetworkUtilsProvider.get(), singletonCImpl.provideWorkManagerServiceProvider.get());

          case 1: // com.company.attendance.ui.screens.login.EnhancedLoginViewModel 
          return (T) new EnhancedLoginViewModel(singletonCImpl.provideAuthRepositoryProvider.get(), singletonCImpl.provideAttendanceRepositoryProvider.get());

          case 2: // com.company.attendance.ui.screens.history.HistoryViewModel 
          return (T) new HistoryViewModel(singletonCImpl.provideAttendanceRepositoryProvider.get());

          case 3: // com.company.attendance.ui.screens.login.LoginViewModel 
          return (T) new LoginViewModel(singletonCImpl.provideAttendanceRepositoryProvider.get());

          case 4: // com.company.attendance.ui.screens.onboarding.OnboardingViewModel 
          return (T) new OnboardingViewModel(singletonCImpl.provideAttendanceRepositoryProvider.get(), singletonCImpl.provideAuthRepositoryProvider.get(), singletonCImpl.provideDeviceUtilsProvider.get(), singletonCImpl.providePreferencesManagerProvider.get());

          case 5: // com.company.attendance.ui.screens.settings.SettingsViewModel 
          return (T) new SettingsViewModel(singletonCImpl.providePreferencesManagerProvider.get(), singletonCImpl.provideDeviceUtilsProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends AttendanceApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends AttendanceApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends AttendanceApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<SupabaseClient> provideSupabaseClientProvider;

    private Provider<PreferencesManager> providePreferencesManagerProvider;

    private Provider<AuthRepository> provideAuthRepositoryProvider;

    private Provider<SessionManager> provideSessionManagerProvider;

    private Provider<AttendanceDatabase> provideAttendanceDatabaseProvider;

    private Provider<ApprovedWiFiDao> provideApprovedWiFiDaoProvider;

    private Provider<WiFiMonitoringService> provideWiFiMonitoringServiceProvider;

    private Provider<NotificationUtils> provideNotificationUtilsProvider;

    private Provider<WorkManagerService> provideWorkManagerServiceProvider;

    private Provider<AuthInterceptor> provideAuthInterceptorProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<AttendanceApiService> provideAttendanceApiServiceProvider;

    private Provider<QueuedRequestDao> provideQueuedRequestDaoProvider;

    private Provider<DeviceUtils> provideDeviceUtilsProvider;

    private Provider<WiFiValidator> provideWiFiValidatorProvider;

    private Provider<NetworkUtils> provideNetworkUtilsProvider;

    private Provider<Gson> provideGsonProvider;

    private Provider<RequestQueueManager> provideRequestQueueManagerProvider;

    private Provider<AttendanceRecordDao> provideAttendanceRecordDaoProvider;

    private Provider<AttendanceRepository> provideAttendanceRepositoryProvider;

    private Provider<PermissionHandler> providePermissionHandlerProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideSupabaseClientProvider = DoubleCheck.provider(new SwitchingProvider<SupabaseClient>(singletonCImpl, 2));
      this.providePreferencesManagerProvider = DoubleCheck.provider(new SwitchingProvider<PreferencesManager>(singletonCImpl, 3));
      this.provideAuthRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AuthRepository>(singletonCImpl, 1));
      this.provideSessionManagerProvider = DoubleCheck.provider(new SwitchingProvider<SessionManager>(singletonCImpl, 0));
      this.provideAttendanceDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AttendanceDatabase>(singletonCImpl, 6));
      this.provideApprovedWiFiDaoProvider = DoubleCheck.provider(new SwitchingProvider<ApprovedWiFiDao>(singletonCImpl, 5));
      this.provideWiFiMonitoringServiceProvider = DoubleCheck.provider(new SwitchingProvider<WiFiMonitoringService>(singletonCImpl, 4));
      this.provideNotificationUtilsProvider = DoubleCheck.provider(new SwitchingProvider<NotificationUtils>(singletonCImpl, 8));
      this.provideWorkManagerServiceProvider = DoubleCheck.provider(new SwitchingProvider<WorkManagerService>(singletonCImpl, 7));
      this.provideAuthInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<AuthInterceptor>(singletonCImpl, 13));
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 12));
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 11));
      this.provideAttendanceApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<AttendanceApiService>(singletonCImpl, 10));
      this.provideQueuedRequestDaoProvider = DoubleCheck.provider(new SwitchingProvider<QueuedRequestDao>(singletonCImpl, 14));
      this.provideDeviceUtilsProvider = DoubleCheck.provider(new SwitchingProvider<DeviceUtils>(singletonCImpl, 15));
      this.provideWiFiValidatorProvider = DoubleCheck.provider(new SwitchingProvider<WiFiValidator>(singletonCImpl, 16));
      this.provideNetworkUtilsProvider = DoubleCheck.provider(new SwitchingProvider<NetworkUtils>(singletonCImpl, 18));
      this.provideGsonProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonCImpl, 19));
      this.provideRequestQueueManagerProvider = DoubleCheck.provider(new SwitchingProvider<RequestQueueManager>(singletonCImpl, 17));
      this.provideAttendanceRecordDaoProvider = DoubleCheck.provider(new SwitchingProvider<AttendanceRecordDao>(singletonCImpl, 20));
      this.provideAttendanceRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AttendanceRepository>(singletonCImpl, 9));
      this.providePermissionHandlerProvider = DoubleCheck.provider(new SwitchingProvider<PermissionHandler>(singletonCImpl, 21));
    }

    @Override
    public void injectAttendanceApplication(AttendanceApplication attendanceApplication) {
      injectAttendanceApplication2(attendanceApplication);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private AttendanceApplication injectAttendanceApplication2(AttendanceApplication instance) {
      AttendanceApplication_MembersInjector.injectSessionManager(instance, provideSessionManagerProvider.get());
      AttendanceApplication_MembersInjector.injectWifiMonitoringService(instance, provideWiFiMonitoringServiceProvider.get());
      AttendanceApplication_MembersInjector.injectWorkManagerService(instance, provideWorkManagerServiceProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.company.attendance.utils.SessionManager 
          return (T) AppModule_ProvideSessionManagerFactory.provideSessionManager(singletonCImpl.provideAuthRepositoryProvider.get());

          case 1: // com.company.attendance.data.repository.AuthRepository 
          return (T) AppModule_ProvideAuthRepositoryFactory.provideAuthRepository(singletonCImpl.provideSupabaseClientProvider.get(), singletonCImpl.providePreferencesManagerProvider.get());

          case 2: // io.github.jan.supabase.SupabaseClient 
          return (T) AppModule_ProvideSupabaseClientFactory.provideSupabaseClient();

          case 3: // com.company.attendance.utils.PreferencesManager 
          return (T) AppModule_ProvidePreferencesManagerFactory.providePreferencesManager(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 4: // com.company.attendance.service.WiFiMonitoringService 
          return (T) AppModule_ProvideWiFiMonitoringServiceFactory.provideWiFiMonitoringService(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideApprovedWiFiDaoProvider.get());

          case 5: // com.company.attendance.data.local.ApprovedWiFiDao 
          return (T) AppModule_ProvideApprovedWiFiDaoFactory.provideApprovedWiFiDao(singletonCImpl.provideAttendanceDatabaseProvider.get());

          case 6: // com.company.attendance.data.local.AttendanceDatabase 
          return (T) AppModule_ProvideAttendanceDatabaseFactory.provideAttendanceDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 7: // com.company.attendance.service.WorkManagerService 
          return (T) AppModule_ProvideWorkManagerServiceFactory.provideWorkManagerService(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideNotificationUtilsProvider.get());

          case 8: // com.company.attendance.utils.NotificationUtils 
          return (T) AppModule_ProvideNotificationUtilsFactory.provideNotificationUtils(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 9: // com.company.attendance.data.repository.AttendanceRepository 
          return (T) AppModule_ProvideAttendanceRepositoryFactory.provideAttendanceRepository(singletonCImpl.provideSupabaseClientProvider.get(), singletonCImpl.provideAttendanceApiServiceProvider.get(), singletonCImpl.provideQueuedRequestDaoProvider.get(), singletonCImpl.providePreferencesManagerProvider.get(), singletonCImpl.provideDeviceUtilsProvider.get(), singletonCImpl.provideWiFiValidatorProvider.get(), singletonCImpl.provideWiFiMonitoringServiceProvider.get(), singletonCImpl.provideRequestQueueManagerProvider.get(), singletonCImpl.provideAttendanceRecordDaoProvider.get());

          case 10: // com.company.attendance.data.remote.AttendanceApiService 
          return (T) AppModule_ProvideAttendanceApiServiceFactory.provideAttendanceApiService(singletonCImpl.provideRetrofitProvider.get());

          case 11: // retrofit2.Retrofit 
          return (T) AppModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.provideOkHttpClientProvider.get(), singletonCImpl.providePreferencesManagerProvider.get());

          case 12: // okhttp3.OkHttpClient 
          return (T) AppModule_ProvideOkHttpClientFactory.provideOkHttpClient(singletonCImpl.provideAuthInterceptorProvider.get());

          case 13: // com.company.attendance.network.AuthInterceptor 
          return (T) AppModule_ProvideAuthInterceptorFactory.provideAuthInterceptor(singletonCImpl.provideSessionManagerProvider.get());

          case 14: // com.company.attendance.data.local.QueuedRequestDao 
          return (T) AppModule_ProvideQueuedRequestDaoFactory.provideQueuedRequestDao(singletonCImpl.provideAttendanceDatabaseProvider.get());

          case 15: // com.company.attendance.utils.DeviceUtils 
          return (T) AppModule_ProvideDeviceUtilsFactory.provideDeviceUtils(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 16: // com.company.attendance.utils.WiFiValidator 
          return (T) AppModule_ProvideWiFiValidatorFactory.provideWiFiValidator(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideWiFiMonitoringServiceProvider.get());

          case 17: // com.company.attendance.service.RequestQueueManager 
          return (T) AppModule_ProvideRequestQueueManagerFactory.provideRequestQueueManager(singletonCImpl.provideQueuedRequestDaoProvider.get(), singletonCImpl.provideAttendanceApiServiceProvider.get(), singletonCImpl.provideSupabaseClientProvider.get(), singletonCImpl.provideNetworkUtilsProvider.get(), singletonCImpl.provideGsonProvider.get());

          case 18: // com.company.attendance.utils.NetworkUtils 
          return (T) AppModule_ProvideNetworkUtilsFactory.provideNetworkUtils(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 19: // com.google.gson.Gson 
          return (T) AppModule_ProvideGsonFactory.provideGson();

          case 20: // com.company.attendance.data.local.AttendanceRecordDao 
          return (T) AppModule_ProvideAttendanceRecordDaoFactory.provideAttendanceRecordDao(singletonCImpl.provideAttendanceDatabaseProvider.get());

          case 21: // com.company.attendance.utils.PermissionHandler 
          return (T) AppModule_ProvidePermissionHandlerFactory.providePermissionHandler(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
