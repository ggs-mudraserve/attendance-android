// Generated by Dagger (https://dagger.dev).
package com.company.attendance.di;

import com.company.attendance.data.repository.AuthRepository;
import com.company.attendance.utils.SessionManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideSessionManagerFactory implements Factory<SessionManager> {
  private final Provider<AuthRepository> authRepositoryProvider;

  public AppModule_ProvideSessionManagerFactory(Provider<AuthRepository> authRepositoryProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public SessionManager get() {
    return provideSessionManager(authRepositoryProvider.get());
  }

  public static AppModule_ProvideSessionManagerFactory create(
      Provider<AuthRepository> authRepositoryProvider) {
    return new AppModule_ProvideSessionManagerFactory(authRepositoryProvider);
  }

  public static SessionManager provideSessionManager(AuthRepository authRepository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideSessionManager(authRepository));
  }
}
