// Generated by Dagger (https://dagger.dev).
package com.company.attendance.di;

import android.content.Context;
import com.company.attendance.data.local.ApprovedWiFiDao;
import com.company.attendance.data.repository.AttendanceRepository;
import com.company.attendance.service.WiFiMonitoringService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideWiFiMonitoringServiceFactory implements Factory<WiFiMonitoringService> {
  private final Provider<Context> contextProvider;

  private final Provider<ApprovedWiFiDao> approvedWiFiDaoProvider;

  private final Provider<AttendanceRepository> attendanceRepositoryProvider;

  public AppModule_ProvideWiFiMonitoringServiceFactory(Provider<Context> contextProvider,
      Provider<ApprovedWiFiDao> approvedWiFiDaoProvider,
      Provider<AttendanceRepository> attendanceRepositoryProvider) {
    this.contextProvider = contextProvider;
    this.approvedWiFiDaoProvider = approvedWiFiDaoProvider;
    this.attendanceRepositoryProvider = attendanceRepositoryProvider;
  }

  @Override
  public WiFiMonitoringService get() {
    return provideWiFiMonitoringService(contextProvider.get(), approvedWiFiDaoProvider.get(), attendanceRepositoryProvider.get());
  }

  public static AppModule_ProvideWiFiMonitoringServiceFactory create(
      Provider<Context> contextProvider, Provider<ApprovedWiFiDao> approvedWiFiDaoProvider,
      Provider<AttendanceRepository> attendanceRepositoryProvider) {
    return new AppModule_ProvideWiFiMonitoringServiceFactory(contextProvider, approvedWiFiDaoProvider, attendanceRepositoryProvider);
  }

  public static WiFiMonitoringService provideWiFiMonitoringService(Context context,
      ApprovedWiFiDao approvedWiFiDao, AttendanceRepository attendanceRepository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideWiFiMonitoringService(context, approvedWiFiDao, attendanceRepository));
  }
}
