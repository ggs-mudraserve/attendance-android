// Generated by Dagger (https://dagger.dev).
package com.company.attendance.ui.screens.dashboard;

import com.company.attendance.data.repository.AttendanceRepository;
import com.company.attendance.data.repository.AuthRepository;
import com.company.attendance.service.WiFiMonitoringService;
import com.company.attendance.service.WorkManagerService;
import com.company.attendance.utils.NetworkUtils;
import com.company.attendance.utils.PermissionHandler;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DashboardViewModel_Factory implements Factory<DashboardViewModel> {
  private final Provider<AttendanceRepository> attendanceRepositoryProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<WiFiMonitoringService> wifiMonitoringServiceProvider;

  private final Provider<PermissionHandler> permissionHandlerProvider;

  private final Provider<NetworkUtils> networkUtilsProvider;

  private final Provider<WorkManagerService> workManagerServiceProvider;

  public DashboardViewModel_Factory(Provider<AttendanceRepository> attendanceRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<WiFiMonitoringService> wifiMonitoringServiceProvider,
      Provider<PermissionHandler> permissionHandlerProvider,
      Provider<NetworkUtils> networkUtilsProvider,
      Provider<WorkManagerService> workManagerServiceProvider) {
    this.attendanceRepositoryProvider = attendanceRepositoryProvider;
    this.authRepositoryProvider = authRepositoryProvider;
    this.wifiMonitoringServiceProvider = wifiMonitoringServiceProvider;
    this.permissionHandlerProvider = permissionHandlerProvider;
    this.networkUtilsProvider = networkUtilsProvider;
    this.workManagerServiceProvider = workManagerServiceProvider;
  }

  @Override
  public DashboardViewModel get() {
    return newInstance(attendanceRepositoryProvider.get(), authRepositoryProvider.get(), wifiMonitoringServiceProvider.get(), permissionHandlerProvider.get(), networkUtilsProvider.get(), workManagerServiceProvider.get());
  }

  public static DashboardViewModel_Factory create(
      Provider<AttendanceRepository> attendanceRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<WiFiMonitoringService> wifiMonitoringServiceProvider,
      Provider<PermissionHandler> permissionHandlerProvider,
      Provider<NetworkUtils> networkUtilsProvider,
      Provider<WorkManagerService> workManagerServiceProvider) {
    return new DashboardViewModel_Factory(attendanceRepositoryProvider, authRepositoryProvider, wifiMonitoringServiceProvider, permissionHandlerProvider, networkUtilsProvider, workManagerServiceProvider);
  }

  public static DashboardViewModel newInstance(AttendanceRepository attendanceRepository,
      AuthRepository authRepository, WiFiMonitoringService wifiMonitoringService,
      PermissionHandler permissionHandler, NetworkUtils networkUtils,
      WorkManagerService workManagerService) {
    return new DashboardViewModel(attendanceRepository, authRepository, wifiMonitoringService, permissionHandler, networkUtils, workManagerService);
  }
}
