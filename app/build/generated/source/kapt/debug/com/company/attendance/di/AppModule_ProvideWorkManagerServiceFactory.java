// Generated by Dagger (https://dagger.dev).
package com.company.attendance.di;

import android.content.Context;
import com.company.attendance.service.WorkManagerService;
import com.company.attendance.utils.NotificationUtils;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideWorkManagerServiceFactory implements Factory<WorkManagerService> {
  private final Provider<Context> contextProvider;

  private final Provider<NotificationUtils> notificationUtilsProvider;

  public AppModule_ProvideWorkManagerServiceFactory(Provider<Context> contextProvider,
      Provider<NotificationUtils> notificationUtilsProvider) {
    this.contextProvider = contextProvider;
    this.notificationUtilsProvider = notificationUtilsProvider;
  }

  @Override
  public WorkManagerService get() {
    return provideWorkManagerService(contextProvider.get(), notificationUtilsProvider.get());
  }

  public static AppModule_ProvideWorkManagerServiceFactory create(Provider<Context> contextProvider,
      Provider<NotificationUtils> notificationUtilsProvider) {
    return new AppModule_ProvideWorkManagerServiceFactory(contextProvider, notificationUtilsProvider);
  }

  public static WorkManagerService provideWorkManagerService(Context context,
      NotificationUtils notificationUtils) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideWorkManagerService(context, notificationUtils));
  }
}
