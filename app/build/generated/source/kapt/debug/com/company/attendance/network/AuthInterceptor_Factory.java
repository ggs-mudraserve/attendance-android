// Generated by Dagger (https://dagger.dev).
package com.company.attendance.network;

import com.company.attendance.utils.SessionManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AuthInterceptor_Factory implements Factory<AuthInterceptor> {
  private final Provider<SessionManager> sessionManagerProvider;

  public AuthInterceptor_Factory(Provider<SessionManager> sessionManagerProvider) {
    this.sessionManagerProvider = sessionManagerProvider;
  }

  @Override
  public AuthInterceptor get() {
    return newInstance(sessionManagerProvider.get());
  }

  public static AuthInterceptor_Factory create(Provider<SessionManager> sessionManagerProvider) {
    return new AuthInterceptor_Factory(sessionManagerProvider);
  }

  public static AuthInterceptor newInstance(SessionManager sessionManager) {
    return new AuthInterceptor(sessionManager);
  }
}
