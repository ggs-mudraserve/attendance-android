// Generated by Dagger (https://dagger.dev).
package com.company.attendance.di;

import com.company.attendance.data.remote.AttendanceApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideAttendanceApiServiceFactory implements Factory<AttendanceApiService> {
  private final Provider<Retrofit> retrofitProvider;

  public AppModule_ProvideAttendanceApiServiceFactory(Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public AttendanceApiService get() {
    return provideAttendanceApiService(retrofitProvider.get());
  }

  public static AppModule_ProvideAttendanceApiServiceFactory create(
      Provider<Retrofit> retrofitProvider) {
    return new AppModule_ProvideAttendanceApiServiceFactory(retrofitProvider);
  }

  public static AttendanceApiService provideAttendanceApiService(Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideAttendanceApiService(retrofit));
  }
}
