// Generated by Dagger (https://dagger.dev).
package com.company.attendance.di;

import com.company.attendance.data.local.QueuedRequestDao;
import com.company.attendance.data.remote.AttendanceApiService;
import com.company.attendance.service.RequestQueueManager;
import com.company.attendance.utils.NetworkUtils;
import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.github.jan.supabase.SupabaseClient;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideRequestQueueManagerFactory implements Factory<RequestQueueManager> {
  private final Provider<QueuedRequestDao> queuedRequestDaoProvider;

  private final Provider<AttendanceApiService> apiServiceProvider;

  private final Provider<SupabaseClient> supabaseClientProvider;

  private final Provider<NetworkUtils> networkUtilsProvider;

  private final Provider<Gson> gsonProvider;

  public AppModule_ProvideRequestQueueManagerFactory(
      Provider<QueuedRequestDao> queuedRequestDaoProvider,
      Provider<AttendanceApiService> apiServiceProvider,
      Provider<SupabaseClient> supabaseClientProvider, Provider<NetworkUtils> networkUtilsProvider,
      Provider<Gson> gsonProvider) {
    this.queuedRequestDaoProvider = queuedRequestDaoProvider;
    this.apiServiceProvider = apiServiceProvider;
    this.supabaseClientProvider = supabaseClientProvider;
    this.networkUtilsProvider = networkUtilsProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public RequestQueueManager get() {
    return provideRequestQueueManager(queuedRequestDaoProvider.get(), apiServiceProvider.get(), supabaseClientProvider.get(), networkUtilsProvider.get(), gsonProvider.get());
  }

  public static AppModule_ProvideRequestQueueManagerFactory create(
      Provider<QueuedRequestDao> queuedRequestDaoProvider,
      Provider<AttendanceApiService> apiServiceProvider,
      Provider<SupabaseClient> supabaseClientProvider, Provider<NetworkUtils> networkUtilsProvider,
      Provider<Gson> gsonProvider) {
    return new AppModule_ProvideRequestQueueManagerFactory(queuedRequestDaoProvider, apiServiceProvider, supabaseClientProvider, networkUtilsProvider, gsonProvider);
  }

  public static RequestQueueManager provideRequestQueueManager(QueuedRequestDao queuedRequestDao,
      AttendanceApiService apiService, SupabaseClient supabaseClient, NetworkUtils networkUtils,
      Gson gson) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRequestQueueManager(queuedRequestDao, apiService, supabaseClient, networkUtils, gson));
  }
}
