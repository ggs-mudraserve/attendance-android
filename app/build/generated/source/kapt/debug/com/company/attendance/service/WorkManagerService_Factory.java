// Generated by Dagger (https://dagger.dev).
package com.company.attendance.service;

import android.content.Context;
import com.company.attendance.utils.NotificationUtils;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class WorkManagerService_Factory implements Factory<WorkManagerService> {
  private final Provider<Context> contextProvider;

  private final Provider<NotificationUtils> notificationUtilsProvider;

  public WorkManagerService_Factory(Provider<Context> contextProvider,
      Provider<NotificationUtils> notificationUtilsProvider) {
    this.contextProvider = contextProvider;
    this.notificationUtilsProvider = notificationUtilsProvider;
  }

  @Override
  public WorkManagerService get() {
    return newInstance(contextProvider.get(), notificationUtilsProvider.get());
  }

  public static WorkManagerService_Factory create(Provider<Context> contextProvider,
      Provider<NotificationUtils> notificationUtilsProvider) {
    return new WorkManagerService_Factory(contextProvider, notificationUtilsProvider);
  }

  public static WorkManagerService newInstance(Context context,
      NotificationUtils notificationUtils) {
    return new WorkManagerService(context, notificationUtils);
  }
}
