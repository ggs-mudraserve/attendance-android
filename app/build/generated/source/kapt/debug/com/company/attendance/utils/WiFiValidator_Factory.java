// Generated by Dagger (https://dagger.dev).
package com.company.attendance.utils;

import android.content.Context;
import com.company.attendance.service.WiFiMonitoringService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class WiFiValidator_Factory implements Factory<WiFiValidator> {
  private final Provider<Context> contextProvider;

  private final Provider<WiFiMonitoringService> wifiMonitoringServiceProvider;

  public WiFiValidator_Factory(Provider<Context> contextProvider,
      Provider<WiFiMonitoringService> wifiMonitoringServiceProvider) {
    this.contextProvider = contextProvider;
    this.wifiMonitoringServiceProvider = wifiMonitoringServiceProvider;
  }

  @Override
  public WiFiValidator get() {
    return newInstance(contextProvider.get(), wifiMonitoringServiceProvider.get());
  }

  public static WiFiValidator_Factory create(Provider<Context> contextProvider,
      Provider<WiFiMonitoringService> wifiMonitoringServiceProvider) {
    return new WiFiValidator_Factory(contextProvider, wifiMonitoringServiceProvider);
  }

  public static WiFiValidator newInstance(Context context,
      WiFiMonitoringService wifiMonitoringService) {
    return new WiFiValidator(context, wifiMonitoringService);
  }
}
